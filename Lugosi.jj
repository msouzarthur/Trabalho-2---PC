PARSER_BEGIN(Lugosi)
import java.io.*;
public class Lugosi {
  public static void main(String args[]) throws ParseException,IOException {
    Lugosi analisador = new Lugosi(new FileInputStream(args[0]));
    analisador.Lugosi();
  }
}

PARSER_END(Lugosi)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <LET: "let">
| <VOID: "void">
| <FLOAT: "float">
| <BOOL: "bool">
| <ACHAVES: "{">
| <FCHAVES: "}">
| <APARENTESES: "(">
| <FPARENTESES: ")">
| <PONTOEVIRGULA: ";">
| <ATRIBUICAO: ":=">
| <SAIDA: "printIO">
| <ENTRADA: "readIO">
| <IF: "if">
| <DO: "do">
| <WHILE: "while">
| <RETURN: "return">
| <DEF: "def">
| <SOMA: "+"> 
| <MULT: "*"> 
| <DIV: "/"> 
| <SUB: "-"> 
| <AND: "&&"> 
| <OR: "||"> 
| <MENOR: "<"> 
| <MAIOR: ">"> 
| <IGUAL: "==">
| <TRUE: "true">
| <FALSE: "false">
| <VIRGULA: ",">
}

TOKEN :
{
  <NUM : (["0"-"9"])+  ((".") (["0"-"9"])+)? (("E") ("+" | "-")? (["0"-"9"])+ )?>
| <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_"["a"-"z","A"-"Z","0"-"9"])*>

}

void Lugosi () :
{Token t;}
{
  (
    MAIN() (FUNC())?
  )*
  <EOF>
}

void MAIN():
{}
{
  <VOID> <MAIN> <ACHAVES> VARDECL() SEQCOMANDOS() <FCHAVES>
}

void VARDECL() :
{}
{
  (<LET> TIPO() <ID> <PONTOEVIRGULA>)*
}

void TIPO():
{}
{
  <FLOAT> 
| <BOOL> 
| <VOID>
}

void SEQCOMANDOS() :
{}
{
  (COMANDO())* 
}

void COMANDO() :
{}
{
  <ID> COMANDO1()
| <IF> EXP() <ACHAVES> SEQCOMANDOS() <FCHAVES> <PONTOEVIRGULA>
| <WHILE> EXP() <DO> <ACHAVES> SEQCOMANDOS() <FCHAVES> <PONTOEVIRGULA>
| <RETURN> EXP() <PONTOEVIRGULA>
| <SAIDA> EXP() <PONTOEVIRGULA>
}

void COMANDO1() :
{}
{
  <ATRIBUICAO> COMANDO2()
| <APARENTESES> (LISTAEXP())? <FPARENTESES> <PONTOEVIRGULA>
}

void COMANDO2() :
{}
{
  EXP() <PONTOEVIRGULA>
| <ENTRADA> <APARENTESES> <FPARENTESES>
}

void EXP() :
{}
{
  <APARENTESES> EXP() OP() EXP() <FPARENTESES> 
| FATOR()
}

void FATOR():
{}
{
  <ID> FATOR1()
| <NUM>
| <TRUE>
| <FALSE>
}

void FATOR1():
{}
{
  (<APARENTESES> LISTAEXP() <FPARENTESES>)*
}

void OP() :
{}
{
  <SOMA>  
| <MULT> 
| <DIV>  
| <SUB>  
| <AND>  
| <OR>  
| <MENOR>  
| <MAIOR> 
| <IGUAL>
}

void LISTAEXP() :
{}
{
   EXP() (<VIRGULA> EXP())*
}

void FUNC() :
{}
{
  <DEF> TIPO() <ID> <APARENTESES> (LISTAARG())? <FPARENTESES> <ACHAVES> VARDECL() SEQCOMANDOS() <FCHAVES> (<DEF> TIPO() <ID> <APARENTESES> (LISTAARG())? <FPARENTESES> <ACHAVES> VARDECL() SEQCOMANDOS() <FCHAVES>)*
}

void LISTAARG() :
{}
{
  TIPO() <ID> (<VIRGULA> TIPO() <ID>)*
}